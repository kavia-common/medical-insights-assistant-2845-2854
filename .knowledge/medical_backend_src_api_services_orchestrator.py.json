{"is_source_file": true, "format": "Python", "description": "This file defines the MedicalOrchestrator class, which manages the workflow for medical interview and advice processes, including deprecated in-memory methods and a key method that interfaces with an external medical advisor agent.", "external_files": ["./agents"], "external_methods": ["medical_advisor_agent.advise"], "published": ["orchestrator"], "classes": [{"name": "MedicalOrchestrator", "description": "A class that orchestrates medical interview workflows and interacts with a medical advisor agent. Contains deprecated methods for in-memory interviews and the current method for processing interview text using external advice mechanisms."}], "methods": [{"name": "Dict[str,Any] run_interview_step(self, interview_id: str)", "description": "Deprecated method for introducing in-memory interview questions, retained for backward compatibility.", "scope": "MedicalOrchestrator", "scopeKind": "class"}, {"name": "Dict[str,Any] run_advisor(self, interview_id: str, max_items: int = 3)", "description": "Deprecated method for in-memory transcript advice, retained for backward compatibility.", "scope": "MedicalOrchestrator", "scopeKind": "class"}, {"name": "Dict[str,Any] run_advisor_on_text(self, patient_id: str, interview_text: str, max_items: int = 3)", "description": "Primary method for analyzing interview text using an external RAG-based advisory system and returning suggestions.", "scope": "MedicalOrchestrator", "scopeKind": "class"}], "calls": ["medical_advisor_agent.advise"], "search-terms": ["MedicalOrchestrator", "orchestrator", "run_advisor_on_text", "medical_advisor_agent"], "state": 2, "file_id": 14, "knowledge_revision": 69, "git_revision": "b79944e2b69e2c80a64ab3970f403c02c63caa5d", "revision_history": [{"30": ""}, {"45": "0e2108f3564d1a36b6b0fd9a36811e042a466914"}, {"62": "0e2108f3564d1a36b6b0fd9a36811e042a466914"}, {"69": "b79944e2b69e2c80a64ab3970f403c02c63caa5d"}], "ctags": [{"_type": "tag", "name": "MedicalOrchestrator", "path": "/home/kavia/workspace/code-generation/medical-insights-assistant-2845-2854/medical_backend/src/api/services/orchestrator.py", "pattern": "/^class MedicalOrchestrator:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "log", "path": "/home/kavia/workspace/code-generation/medical-insights-assistant-2845-2854/medical_backend/src/api/services/orchestrator.py", "pattern": "/^log = logging.getLogger(\"app.orchestrator\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "orchestrator", "path": "/home/kavia/workspace/code-generation/medical-insights-assistant-2845-2854/medical_backend/src/api/services/orchestrator.py", "pattern": "/^orchestrator = MedicalOrchestrator()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "run_advisor", "path": "/home/kavia/workspace/code-generation/medical-insights-assistant-2845-2854/medical_backend/src/api/services/orchestrator.py", "pattern": "/^    async def run_advisor(self, interview_id: str, max_items: int = 3) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, interview_id: str, max_items: int = 3)", "scope": "MedicalOrchestrator", "scopeKind": "class"}, {"_type": "tag", "name": "run_advisor_on_text", "path": "/home/kavia/workspace/code-generation/medical-insights-assistant-2845-2854/medical_backend/src/api/services/orchestrator.py", "pattern": "/^    async def run_advisor_on_text(self, patient_id: str, interview_text: str, max_items: int = 3/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, patient_id: str, interview_text: str, max_items: int = 3)", "scope": "MedicalOrchestrator", "scopeKind": "class"}, {"_type": "tag", "name": "run_interview_step", "path": "/home/kavia/workspace/code-generation/medical-insights-assistant-2845-2854/medical_backend/src/api/services/orchestrator.py", "pattern": "/^    async def run_interview_step(self, interview_id: str) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, interview_id: str)", "scope": "MedicalOrchestrator", "scopeKind": "class"}], "hash": "e2a06806093725772bab0e701f643679", "format-version": 4, "code-base-name": "medical_backend", "filename": "medical_backend/src/api/services/orchestrator.py", "fields": [{"name": "log = logging.getLogger(\"app.orchestrator\")", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "orchestrator = MedicalOrchestrator()", "scope": "", "scopeKind": "", "description": "unavailable"}]}