{"is_source_file": true, "format": "Python", "description": "This file defines the MedicalOrchestrator class responsible for coordinating medical agent workflows, specifically for handling patient interviews and analyzing interview text using a medical advisor.", "external_files": ["./agents.py"], "external_methods": ["medical_advisor_agent.advise"], "published": [], "classes": [{"name": "MedicalOrchestrator", "description": "A class that manages the workflow for medical interview agents, including deprecated in-memory methods and the new file-based interview analysis."}], "methods": [{"name": "Dict[str,Any] run_interview_step(self, interview_id: str)", "description": "Deprecated method for in-memory interview question generation. Raises an error indicating the method is outdated.", "scope": "MedicalOrchestrator", "scopeKind": "class"}, {"name": "Dict[str,Any] run_advisor(self, interview_id: str, max_items: int = 3)", "description": "Deprecated method for in-memory transcript advice. Raises an error indicating the method is outdated.", "scope": "MedicalOrchestrator", "scopeKind": "class"}, {"name": "Dict[str,Any] run_advisor_on_text(self, patient_id: str, interview_text: str, max_items: int = 3)", "description": "Analyzes interview text with the medical advisor agent using retrieval-augmented generation (RAG) and returns suggestions.", "scope": "MedicalOrchestrator", "scopeKind": "class"}], "calls": ["medical_advisor_agent.advise"], "search-terms": ["MedicalOrchestrator", "orchestrator.py", "run_advisor_on_text", "medical_advisor_agent", "agent workflow", "file-based interview analysis"], "state": 2, "file_id": 14, "knowledge_revision": 62, "git_revision": "0e2108f3564d1a36b6b0fd9a36811e042a466914", "revision_history": [{"30": ""}, {"45": "0e2108f3564d1a36b6b0fd9a36811e042a466914"}, {"62": "0e2108f3564d1a36b6b0fd9a36811e042a466914"}], "ctags": [{"_type": "tag", "name": "MedicalOrchestrator", "path": "/home/kavia/workspace/code-generation/medical-insights-assistant-2845-2854/medical_backend/src/api/services/orchestrator.py", "pattern": "/^class MedicalOrchestrator:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "log", "path": "/home/kavia/workspace/code-generation/medical-insights-assistant-2845-2854/medical_backend/src/api/services/orchestrator.py", "pattern": "/^log = logging.getLogger(\"app.orchestrator\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "orchestrator", "path": "/home/kavia/workspace/code-generation/medical-insights-assistant-2845-2854/medical_backend/src/api/services/orchestrator.py", "pattern": "/^orchestrator = MedicalOrchestrator()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "run_advisor", "path": "/home/kavia/workspace/code-generation/medical-insights-assistant-2845-2854/medical_backend/src/api/services/orchestrator.py", "pattern": "/^    async def run_advisor(self, interview_id: str, max_items: int = 3) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, interview_id: str, max_items: int = 3)", "scope": "MedicalOrchestrator", "scopeKind": "class"}, {"_type": "tag", "name": "run_advisor_on_text", "path": "/home/kavia/workspace/code-generation/medical-insights-assistant-2845-2854/medical_backend/src/api/services/orchestrator.py", "pattern": "/^    async def run_advisor_on_text(self, patient_id: str, interview_text: str, max_items: int = 3/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, patient_id: str, interview_text: str, max_items: int = 3)", "scope": "MedicalOrchestrator", "scopeKind": "class"}, {"_type": "tag", "name": "run_interview_step", "path": "/home/kavia/workspace/code-generation/medical-insights-assistant-2845-2854/medical_backend/src/api/services/orchestrator.py", "pattern": "/^    async def run_interview_step(self, interview_id: str) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, interview_id: str)", "scope": "MedicalOrchestrator", "scopeKind": "class"}], "hash": "148d03948916d9657d42fdddfa77524e", "format-version": 4, "code-base-name": "medical_backend", "filename": "medical_backend/src/api/services/orchestrator.py", "fields": [{"name": "log = logging.getLogger(\"app.orchestrator\")", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "orchestrator = MedicalOrchestrator()", "scope": "", "scopeKind": "", "description": "unavailable"}]}